import google.generativeai as genai
from typing import Dict, List, Optional
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from ..database import SessionLocal
from .. import models
import json
import os
from dotenv import load_dotenv
import time
from ..utils import log

# Cargar variables de entorno
load_dotenv()

class SalesAgent:
    """Agente especializado en asesoramiento comercial y recomendaciones de venta"""
    
    def __init__(self):
        # ‚úÖ USAR EL MISMO SISTEMA DE API KEYS QUE ConversationManager
        self.api_keys = self._load_api_keys()
        self.current_key_index = 0
        self.key_retry_delays = {}  # Para tracking de delays por key
        
        if not self.api_keys:
            raise ValueError("No se encontraron GOOGLE_API_KEY en variables de entorno")
        
        # Configurar Gemini con la primera key v√°lida
        self._configure_gemini()
        
        log(f"üí° SalesAgent inicializado con {len(self.api_keys)} API keys")
        
        # Definir conocimiento de productos textiles
        self.product_knowledge = {
            "camiseta": {
                "usos": ["uniformes empresariales", "promocionales", "eventos", "dotaci√≥n personal"],
                "materiales": ["algod√≥n 100%", "poli√©ster", "mezcla algod√≥n-poli√©ster"],
                "ventajas": ["comodidad", "durabilidad", "f√°cil lavado", "personalizable"],
                "sectores": ["construcci√≥n", "servicios", "retail", "hospitality"]
            },
            "pantal√≥n": {
                "usos": ["uniformes trabajo", "dotaci√≥n laboral", "seguridad industrial"],
                "materiales": ["drill", "gabardina", "denim", "poli√©ster"],
                "ventajas": ["resistencia", "durabilidad", "profesionalismo", "comodidad"],
                "sectores": ["construcci√≥n", "industria", "servicios", "oficina"]
            },
            "sudadera": {
                "usos": ["construcci√≥n", "trabajo exterior", "promocionales", "deportivo"],
                "materiales": ["algod√≥n afelpado", "poli√©ster", "mezclas"],
                "ventajas": ["abrigo", "comodidad", "durabilidad", "vers√°til"],
                "sectores": ["construcci√≥n", "log√≠stica", "deportivo", "promocional"]
            },
            "camisa": {
                "usos": ["oficina", "atenci√≥n cliente", "eventos", "uniformes formales"],
                "materiales": ["algod√≥n", "poli√©ster", "mezclas anti-arrugas"],
                "ventajas": ["profesionalismo", "elegancia", "comodidad", "f√°cil planchado"],
                "sectores": ["oficina", "servicios", "hospitality", "retail"]
            },
            "falda": {
                "usos": ["uniformes femeninos", "oficina", "servicios", "hospitality"],
                "materiales": ["gabardina", "poli√©ster", "mezclas"],
                "ventajas": ["profesionalismo", "comodidad", "versatilidad", "elegancia"],
                "sectores": ["oficina", "servicios", "hospitality", "retail"]
            }
        }
    
    def _load_api_keys(self) -> List[str]:
        """Carga todas las API keys disponibles desde el .env"""
        api_keys = []
        
        # Buscar todas las keys que sigan el patr√≥n GOOGLE_API_KEY_X
        for i in range(1, 10):  # Buscar hasta GOOGLE_API_KEY_9
            key = os.getenv(f"GOOGLE_API_KEY_{i}")
            if key:
                api_keys.append(key)
        
        # Tambi√©n buscar la key gen√©rica por compatibilidad
        generic_key = os.getenv("GEMINI_API_KEY")
        if generic_key and generic_key not in api_keys:
            api_keys.append(generic_key)
        
        return api_keys
    
    def _configure_gemini(self):
        """Configura Gemini con la API key actual"""
        current_key = self.api_keys[self.current_key_index]
        genai.configure(api_key=current_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        log(f"üí° SalesAgent configurado con API key #{self.current_key_index + 1}")
    
    def _switch_to_next_key(self):
        """Cambia a la siguiente API key disponible"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        self._configure_gemini()
        log(f"üí°üîÑ SalesAgent cambiado a API key #{self.current_key_index + 1}")
    
    async def _make_gemini_request_with_fallback(self, prompt: str, **kwargs):
        """Hace petici√≥n a Gemini con fallback autom√°tico entre API keys"""
        
        max_retries = len(self.api_keys)  # Intentar con todas las keys
        retry_count = 0
        
        while retry_count < max_retries:
            try:
                current_key_num = self.current_key_index + 1
                log(f"üí°üîç SalesAgent usando API Key #{current_key_num}")
                
                # Verificar si esta key tiene delay de retry
                key_id = f"sales_key_{self.current_key_index}"
                if key_id in self.key_retry_delays:
                    retry_time = self.key_retry_delays[key_id]
                    if time.time() < retry_time:
                        log(f"üí°‚è∞ API Key #{current_key_num} en cooldown hasta {datetime.fromtimestamp(retry_time)}")
                        self._switch_to_next_key()
                        retry_count += 1
                        continue
                
                # Intentar la petici√≥n
                response = self.model.generate_content(prompt, **kwargs)
                
                # Si llegamos aqu√≠, la petici√≥n fue exitosa
                # Limpiar cualquier delay previo para esta key
                if key_id in self.key_retry_delays:
                    del self.key_retry_delays[key_id]
                
                return response
                
            except Exception as e:
                error_str = str(e).lower()
                log(f"üí°‚ùå Error con API key #{current_key_num}: {e}")
                
                # Verificar si es error de cuota
                if "quota" in error_str or "exceeded" in error_str or "429" in error_str:
                    log(f"üí°üö´ API Key #{current_key_num} agot√≥ su cuota")
                    
                    # Poner esta key en cooldown por 1 hora
                    self.key_retry_delays[key_id] = time.time() + 3600
                    
                    # Cambiar a la siguiente key
                    self._switch_to_next_key()
                    retry_count += 1
                    continue
                    
                elif "rate limit" in error_str or "rate_limit" in error_str:
                    log(f"üí°‚è≥ API Key #{current_key_num} tiene rate limiting")
                    
                    # Cooldown m√°s corto para rate limiting (5 minutos)
                    self.key_retry_delays[key_id] = time.time() + 300
                    
                    # Cambiar a la siguiente key
                    self._switch_to_next_key()
                    retry_count += 1
                    continue
                    
                else:
                    # Error no relacionado con cuota, intentar una vez m√°s con la siguiente key
                    log(f"üí°üîÑ Error general, intentando con siguiente key")
                    self._switch_to_next_key()
                    retry_count += 1
                    continue
        
        # Si llegamos aqu√≠, todas las keys fallaron
        raise Exception(f"SalesAgent: Todas las API keys ({len(self.api_keys)}) han fallado o est√°n en cooldown")

    async def handle_sales_advice(self, message: str, conversation: Dict) -> str:
        """Maneja consultas de asesoramiento comercial y recomendaciones"""
        
        try:
            log(f"üí° SalesAgent procesando: {message}")
            
            # 1. Analizar qu√© tipo de asesoramiento necesita
            advice_type = await self._analyze_advice_request(message, conversation)
            
            # 2. Obtener informaci√≥n relevante del inventario
            relevant_products = await self._get_relevant_products_for_advice(advice_type, conversation)
            
            # 3. Generar recomendaci√≥n personalizada
            response = await self._generate_sales_advice(message, advice_type, relevant_products, conversation)
            
            return response
            
        except Exception as e:
            log(f"üí°‚ùå Error en SalesAgent: {e}")
            return "Disculpa, tuve un problema generando recomendaciones. ¬øPodr√≠as contarme m√°s espec√≠ficamente qu√© necesit√°s para tu empresa?"
    
    async def _analyze_advice_request(self, message: str, conversation: Dict) -> Dict:
        """Analiza qu√© tipo de asesoramiento comercial necesita"""
        
        # Extraer contexto de la conversaci√≥n
        recent_messages = ""
        for msg in conversation.get('messages', [])[-3:]:  # √öltimos 3 mensajes
            role = "Usuario" if msg['role'] == 'user' else "Bot"
            recent_messages += f"{role}: {msg['content']}\n"
        
        # Informaci√≥n de pedidos previos para personalizaci√≥n
        previous_orders = ""
        if conversation.get('recent_orders'):
            previous_orders = "Pedidos anteriores:\n"
            for order in conversation.get('recent_orders', [])[:3]:
                previous_orders += f"- Cantidad: {order['quantity']}, Status: {order['status']}\n"
        
        prompt = f"""Analiza qu√© tipo de asesoramiento comercial necesita este cliente B2B:

CONVERSACI√ìN RECIENTE:
{recent_messages}

MENSAJE ACTUAL: "{message}"

{previous_orders}

Sectores t√≠picos: construcci√≥n, servicios, retail, oficina, hospitality, industria
Productos disponibles: camisetas, pantalones, sudaderas, camisas, faldas

Responde SOLO con JSON v√°lido:
{{
    "advice_type": "product_recommendation" | "sector_specific" | "quantity_advice" | "use_case_advice" | "cost_optimization" | "material_advice" | "general_business",
    "sector_context": "construcci√≥n|servicios|retail|oficina|hospitality|industria|unclear",
    "specific_products": ["lista_de_productos_mencionados"],
    "business_need": "uniformes|dotaci√≥n|promocional|eventos|seguridad|unclear",
    "budget_concern": true_si_menciona_precio_o_presupuesto,
    "quantity_context": "small_batch|medium_volume|large_scale|unclear",
    "urgency": "urgent|normal|flexible",
    "personalization_hints": ["detalles_espec√≠ficos_del_negocio"]
}}

EJEMPLOS:
- "qu√© me recomend√°s para mi constructora?" ‚Üí {{"advice_type": "sector_specific", "sector_context": "construcci√≥n", "business_need": "dotaci√≥n"}}
- "cu√°l es mejor para uniformes?" ‚Üí {{"advice_type": "product_recommendation", "business_need": "uniformes"}}
- "necesito algo econ√≥mico para 200 empleados" ‚Üí {{"advice_type": "cost_optimization", "quantity_context": "large_scale", "budget_concern": true}}
- "qu√© tela dura m√°s?" ‚Üí {{"advice_type": "material_advice"}}"""

        try:
            response = await self._make_gemini_request_with_fallback(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.2,  # Algo m√°s creativo para asesoramiento
                    max_output_tokens=250,
                )
            )
            
            # Limpiar y parsear respuesta
            response_clean = response.text.strip()
            if response_clean.startswith("```json"):
                response_clean = response_clean[7:-3]
            elif response_clean.startswith("```"):
                response_clean = response_clean[3:-3]
            
            parsed_advice = json.loads(response_clean)
            log(f"üí°üéØ An√°lisis de asesoramiento: {parsed_advice}")
            
            return parsed_advice
            
        except Exception as e:
            log(f"üí°‚ùå Error analizando asesoramiento: {e}")
            
            # Fallback basado en palabras clave
            message_lower = message.lower()
            
            # Detectar sector
            sector = "unclear"
            if any(word in message_lower for word in ["construcci√≥n", "construcci√≥n", "obra", "alba√±il"]):
                sector = "construcci√≥n"
            elif any(word in message_lower for word in ["oficina", "empresa", "corporativo"]):
                sector = "oficina"
            elif any(word in message_lower for word in ["restaurant", "hotel", "servicio"]):
                sector = "hospitality"
            elif any(word in message_lower for word in ["tienda", "retail", "comercio"]):
                sector = "retail"
            
            # Detectar tipo de consulta
            if any(word in message_lower for word in ["recomend√°s", "mejor", "conviene"]):
                advice_type = "product_recommendation"
            elif any(word in message_lower for word in ["precio", "econ√≥mico", "barato", "costo"]):
                advice_type = "cost_optimization"
            elif any(word in message_lower for word in ["material", "tela", "calidad", "dura"]):
                advice_type = "material_advice"
            else:
                advice_type = "general_business"
            
            return {
                "advice_type": advice_type,
                "sector_context": sector,
                "specific_products": [],
                "business_need": "unclear",
                "budget_concern": "econ√≥mico" in message_lower,
                "quantity_context": "unclear",
                "urgency": "normal",
                "personalization_hints": []
            }
    
    async def _get_relevant_products_for_advice(self, advice_type: Dict, conversation: Dict) -> Dict:
        """Obtiene productos relevantes del inventario para el asesoramiento"""
        
        db = SessionLocal()
        try:
            # Base query: productos con stock > 0
            query = db.query(models.Product).filter(models.Product.stock > 0)
            
            # Filtrar seg√∫n el contexto del asesoramiento
            sector = advice_type.get("sector_context", "")
            business_need = advice_type.get("business_need", "")
            
            # Si hay productos espec√≠ficos mencionados, priorizarlos
            specific_products = advice_type.get("specific_products", [])
            if specific_products:
                # Buscar productos espec√≠ficos mencionados
                for product_type in specific_products:
                    query = query.filter(models.Product.tipo_prenda.ilike(f"%{product_type}%"))
            
            # Limitar a productos m√°s relevantes
            products = query.order_by(models.Product.stock.desc()).limit(15).all()
            
            # Organizar productos por categor√≠a para el asesoramiento
            products_by_type = {}
            total_options = 0
            
            for product in products:
                tipo = product.tipo_prenda.lower()
                if tipo not in products_by_type:
                    products_by_type[tipo] = []
                
                product_data = {
                    "id": product.id,
                    "name": product.name,
                    "tipo_prenda": product.tipo_prenda,
                    "color": product.color,
                    "talla": product.talla,
                    "stock": product.stock,
                    "precio_50_u": product.precio_50_u,
                    "precio_100_u": product.precio_100_u,
                    "precio_200_u": product.precio_200_u,
                    "descripcion": product.descripcion or "Material de calidad premium",
                    "categoria": product.categoria or "General"
                }
                
                products_by_type[tipo].append(product_data)
                total_options += 1
            
            log(f"üí°üìä Productos obtenidos para asesoramiento: {total_options} opciones en {len(products_by_type)} categor√≠as")
            
            return {
                "products_by_type": products_by_type,
                "total_products": total_options,
                "advice_context": advice_type
            }
            
        except Exception as e:
            log(f"üí°‚ùå Error obteniendo productos para asesoramiento: {e}")
            return {
                "products_by_type": {},
                "total_products": 0,
                "advice_context": advice_type,
                "error": str(e)
            }
        finally:
            db.close()
    
    async def _generate_sales_advice(self, message: str, advice_type: Dict, products_data: Dict, conversation: Dict) -> str:
        """Genera asesoramiento comercial personalizado"""
        
        products_by_type = products_data.get("products_by_type", {})
        total_products = products_data.get("total_products", 0)
        
        # Si no hay productos disponibles
        if total_products == 0:
            return "En este momento no tengo productos disponibles para hacerte recomendaciones espec√≠ficas. " \
                   "¬øHay alg√∫n producto particular que te interese que pueda conseguir?"
        
        # Obtener informaci√≥n espec√≠fica del sector/uso
        sector_context = advice_type.get("sector_context", "unclear")
        advice_type_str = advice_type.get("advice_type", "general_business")
        budget_concern = advice_type.get("budget_concern", False)
        
        # Construir contexto de productos para Gemini
        products_context = self._build_products_context_for_gemini(products_by_type)
        
        # Construir contexto de conocimiento sectorial
        sector_knowledge = self._get_sector_knowledge(sector_context)
        
        prompt = f"""Eres un asesor comercial experto en textiles B2B. Genera una recomendaci√≥n personalizada:

CONSULTA DEL CLIENTE: "{message}"

CONTEXTO DEL CLIENTE:
- Sector: {sector_context}
- Tipo de consulta: {advice_type_str}
- Preocupaci√≥n por presupuesto: {budget_concern}
- Necesidad de negocio: {advice_type.get('business_need', 'unclear')}

CONOCIMIENTO SECTORIAL:
{sector_knowledge}

PRODUCTOS DISPONIBLES:
{products_context}

INSTRUCCIONES:
1. Genera una respuesta profesional y consultiva
2. Recomienda productos espec√≠ficos basado en el sector/uso
3. Incluye precios y cantidades cuando sea relevante
4. Menciona ventajas espec√≠ficas para su negocio
5. Sugiere combinaciones inteligentes de productos
6. Si hay preocupaci√≥n por presupuesto, destaca opciones econ√≥micas
7. Incluye consejos pr√°cticos de implementaci√≥n
8. Termina con una pregunta para continuar la conversaci√≥n

FORMATO DE RESPUESTA:
- Saludo consultivo
- Recomendaci√≥n principal con justificaci√≥n
- Opciones espec√≠ficas con precios
- Ventajas para su sector
- Consejo pr√°ctico adicional
- Pregunta de seguimiento

TONO: Profesional, consultivo, orientado a soluciones empresariales"""

        try:
            response = await self._make_gemini_request_with_fallback(
                prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.3,  # Creativo pero coherente
                    max_output_tokens=600,
                )
            )
            
            advice_response = response.text.strip()
            
            # Agregar emoji y estructura si es necesario
            if not advice_response.startswith("üí°"):
                advice_response = f"üí° **ASESORAMIENTO COMERCIAL**\n\n{advice_response}"
            
            return advice_response
            
        except Exception as e:
            log(f"üí°‚ùå Error generando asesoramiento: {e}")
            
            # Fallback con recomendaci√≥n b√°sica basada en el sector
            return self._generate_fallback_advice(advice_type, products_by_type, message)
    
    def _build_products_context_for_gemini(self, products_by_type: Dict) -> str:
        """Construye contexto de productos para Gemini"""
        
        context = ""
        for tipo, products in products_by_type.items():
            context += f"\n{tipo.upper()}S DISPONIBLES:\n"
            
            # Mostrar hasta 3 productos por tipo para no sobrecargar
            for product in products[:3]:
                context += f"- {product['name']} ({product['color']} - {product['talla']})\n"
                context += f"  Stock: {product['stock']} unidades\n"
                context += f"  Precios: ${product['precio_50_u']:,.0f} (50+) | ${product['precio_100_u']:,.0f} (100+) | ${product['precio_200_u']:,.0f} (200+)\n"
            
            if len(products) > 3:
                context += f"  ... y {len(products) - 3} opciones m√°s en {tipo}s\n"
            context += "\n"
        
        return context
    
    def _get_sector_knowledge(self, sector: str) -> str:
        """Obtiene conocimiento espec√≠fico del sector"""
        
        sector_info = {
            "construcci√≥n": """
CONSTRUCCI√ìN:
- Priorizan durabilidad y resistencia al desgaste
- Necesitan ropa c√≥moda para trabajo f√≠sico intenso
- Importante: f√°cil lavado y secado r√°pido
- Colores recomendados: azul, gris, verde (ocultan manchas)
- Productos clave: sudaderas, pantalones resistentes, camisetas b√°sicas
- Vol√∫menes t√≠picos: 50-200 unidades por pedido
""",
            "oficina": """
OFICINA/CORPORATIVO:
- Imagen profesional es prioridad
- Comodidad para trabajo sedentario
- Colores corporativos: azul, blanco, gris, negro
- Productos clave: camisas, pantalones formales, faldas
- Consideran personalizaci√≥n con logos
- Vol√∫menes t√≠picos: 20-100 unidades por pedido
""",
            "servicios": """
SERVICIOS:
- Equilibrio entre profesionalismo y practicidad
- Interacci√≥n con clientes requiere buena imagen
- F√°cil mantenimiento y lavado
- Productos clave: camisetas uniformes, camisas, pantalones
- Personalizaci√≥n con logos empresariales
- Vol√∫menes t√≠picos: 30-150 unidades por pedido
""",
            "hospitality": """
HOSPITALITY (Hoteles/Restaurantes):
- Imagen impecable y profesional
- Comodidad para largas jornadas
- Resistencia a manchas y lavados frecuentes
- Productos clave: camisas, pantalones, faldas uniformes
- Colores que representen la marca
- Vol√∫menes t√≠picos: 50-300 unidades por pedido
""",
            "retail": """
RETAIL:
- Imagen de marca es crucial
- Comodidad para estar de pie muchas horas
- Necesitan proyectar confianza al cliente
- Productos clave: camisetas polo, camisas, pantalones
- Personalizaci√≥n con branding
- Vol√∫menes t√≠picos: 25-120 unidades por pedido
""",
            "industria": """
INDUSTRIA:
- Seguridad y durabilidad son prioridad
- Resistencia a condiciones adversas
- Comodidad para trabajo f√≠sico
- Productos clave: pantalones resistentes, sudaderas, camisetas
- Colores oscuros preferidos
- Vol√∫menes t√≠picos: 100-500 unidades por pedido
"""
        }
        
        return sector_info.get(sector, "GENERAL: Enfoque en calidad, durabilidad y valor por dinero.")
    
    def _generate_fallback_advice(self, advice_type: Dict, products_by_type: Dict, message: str) -> str:
        """Genera recomendaci√≥n b√°sica si falla Gemini"""
        
        sector = advice_type.get("sector_context", "unclear")
        advice_type_str = advice_type.get("advice_type", "general_business")
        
        response = "üí° **ASESORAMIENTO COMERCIAL**\n\n"
        
        if sector == "construcci√≥n":
            response += "Para tu empresa de **construcci√≥n**, recomiendo priorizan **durabilidad y comodidad**:\n\n"
            
            if "sudadera" in products_by_type:
                sudaderas = products_by_type["sudadera"][:2]
                response += "üî∏ **SUDADERAS** - Ideales para trabajo exterior:\n"
                for s in sudaderas:
                    response += f"   ‚Ä¢ {s['name']} - ${s['precio_100_u']:,.0f} c/u (100+ un.)\n"
                response += "\n"
            
            if "pantal√≥n" in products_by_type:
                pantalones = products_by_type["pantal√≥n"][:2]
                response += "üî∏ **PANTALONES** - Resistentes al desgaste:\n"
                for p in pantalones:
                    response += f"   ‚Ä¢ {p['name']} - ${p['precio_100_u']:,.0f} c/u (100+ un.)\n"
                response += "\n"
                
        elif sector == "oficina":
            response += "Para ambiente **corporativo/oficina**, recomiendo productos que proyecten **profesionalismo**:\n\n"
            
            if "camisa" in products_by_type:
                camisas = products_by_type["camisa"][:2]
                response += "üî∏ **CAMISAS** - Imagen profesional:\n"
                for c in camisas:
                    response += f"   ‚Ä¢ {c['name']} - ${c['precio_50_u']:,.0f} c/u (50+ un.)\n"
                response += "\n"
                
        else:
            # Recomendaci√≥n general
            response += "Basado en tu consulta, estas son mis **recomendaciones principales**:\n\n"
            
            # Mostrar productos m√°s populares
            for tipo, products in list(products_by_type.items())[:2]:
                response += f"üî∏ **{tipo.upper()}S** disponibles:\n"
                for product in products[:2]:
                    response += f"   ‚Ä¢ {product['name']} - ${product['precio_50_u']:,.0f} c/u (50+ un.)\n"
                response += "\n"
        
        response += "üí∞ **Ventajas de comprar por volumen:**\n"
        response += "‚Ä¢ 50+ unidades: Precio base\n"
        response += "‚Ä¢ 100+ unidades: Hasta 15% descuento\n"
        response += "‚Ä¢ 200+ unidades: Hasta 25% descuento\n\n"
        
        response += "¬øTe sirve esta informaci√≥n? ¬øHay alg√∫n producto espec√≠fico que te interese m√°s?"
        
        return response

# Instancia global
sales_agent = SalesAgent()